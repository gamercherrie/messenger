{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nexport var ComponentContext = React.createContext(undefined);\nexport var ComponentProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(ComponentContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useComponentContext = function (componentName) {\n  var contextValue = useContext(ComponentContext);\n\n  if (!contextValue) {\n    console.warn(\"The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \" + componentName + \" component.\");\n    return {};\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withComponentContext = function (Component) {\n  var WithComponentContextComponent = function (props) {\n    var componentContext = useComponentContext();\n    return React.createElement(Component, __assign({}, props, componentContext));\n  };\n\n  WithComponentContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithComponentContextComponent;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","ComponentContext","createContext","undefined","ComponentProvider","_a","children","value","createElement","Provider","useComponentContext","componentName","contextValue","console","warn","withComponentContext","Component","WithComponentContextComponent","props","componentContext","displayName","name","replace"],"sources":["/Users/cherrie/Desktop/messenger_ver_2/client/node_modules/stream-chat-react/dist/context/ComponentContext.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var ComponentContext = React.createContext(undefined);\nexport var ComponentProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(ComponentContext.Provider, { value: value }, children));\n};\nexport var useComponentContext = function (componentName) {\n    var contextValue = useContext(ComponentContext);\n    if (!contextValue) {\n        console.warn(\"The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \" + componentName + \" component.\");\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withComponentContext = function (Component) {\n    var WithComponentContextComponent = function (props) {\n        var componentContext = useComponentContext();\n        return React.createElement(Component, __assign({}, props, componentContext));\n    };\n    WithComponentContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithComponentContextComponent;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACP;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,IAAIC,gBAAgB,GAAGF,KAAK,CAACG,aAAN,CAAoBC,SAApB,CAAvB;AACP,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,EAAV,EAAc;EACzC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;EAAA,IAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;EACA,OAAQR,KAAK,CAACS,aAAN,CAAoBP,gBAAgB,CAACQ,QAArC,EAA+C;IAAEF,KAAK,EAAEA;EAAT,CAA/C,EAAiED,QAAjE,CAAR;AACH,CAHM;AAIP,OAAO,IAAII,mBAAmB,GAAG,UAAUC,aAAV,EAAyB;EACtD,IAAIC,YAAY,GAAGZ,UAAU,CAACC,gBAAD,CAA7B;;EACA,IAAI,CAACW,YAAL,EAAmB;IACfC,OAAO,CAACC,IAAR,CAAa,iMAAiMH,aAAjM,GAAiN,aAA9N;IACA,OAAO,EAAP;EACH;;EACD,OAAOC,YAAP;AACH,CAPM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,oBAAoB,GAAG,UAAUC,SAAV,EAAqB;EACnD,IAAIC,6BAA6B,GAAG,UAAUC,KAAV,EAAiB;IACjD,IAAIC,gBAAgB,GAAGT,mBAAmB,EAA1C;IACA,OAAOX,KAAK,CAACS,aAAN,CAAoBQ,SAApB,EAA+B/B,QAAQ,CAAC,EAAD,EAAKiC,KAAL,EAAYC,gBAAZ,CAAvC,CAAP;EACH,CAHD;;EAIAF,6BAA6B,CAACG,WAA9B,GAA4C,CAACJ,SAAS,CAACI,WAAV,IACzCJ,SAAS,CAACK,IAD+B,IAEzC,WAFwC,EAE3BC,OAF2B,CAEnB,MAFmB,EAEX,EAFW,CAA5C;EAGA,OAAOL,6BAAP;AACH,CATM"},"metadata":{},"sourceType":"module"}