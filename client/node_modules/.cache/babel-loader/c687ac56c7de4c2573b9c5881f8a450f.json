{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {\n  var _a = useState(false),\n      newMessagesNotification = _a[0],\n      setNewMessagesNotification = _a[1];\n  /**\n   * use the flag to avoid the initial \"new messages\" quick blink\n   */\n\n\n  var didMount = useRef(false);\n  var lastMessageId = useRef('');\n  var atBottom = useRef(false);\n  useEffect(function () {\n    var _a;\n\n    if (hasMoreNewer) {\n      setNewMessagesNotification(true);\n      return;\n    }\n    /* handle scrolling behavior for new messages */\n\n\n    if (!(messages === null || messages === void 0 ? void 0 : messages.length)) return;\n    var lastMessage = messages[messages.length - 1];\n    var prevMessageId = lastMessageId.current;\n    lastMessageId.current = lastMessage.id || ''; // update last message id\n\n    /* do nothing if new messages are loaded from top(loadMore)  */\n\n    if (lastMessage.id === prevMessageId) return;\n    /* if list is already at the bottom return, followOutput will do the job */\n\n    if (atBottom.current) return;\n    /* if the new message belongs to current user scroll to bottom */\n\n    if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n      /* otherwise just show newMessage notification  */\n      setNewMessagesNotification(true);\n    }\n\n    didMount.current = true;\n  }, [currentUserId, messages, hasMoreNewer]);\n  return {\n    atBottom: atBottom,\n    newMessagesNotification: newMessagesNotification,\n    setNewMessagesNotification: setNewMessagesNotification\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useState","useNewMessageNotification","messages","currentUserId","hasMoreNewer","_a","newMessagesNotification","setNewMessagesNotification","didMount","lastMessageId","atBottom","length","lastMessage","prevMessageId","current","id","user"],"sources":["/Users/cherrie/Desktop/messenger_ver_2/node_modules/stream-chat-react/dist/components/MessageList/hooks/useNewMessageNotification.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {\n    var _a = useState(false), newMessagesNotification = _a[0], setNewMessagesNotification = _a[1];\n    /**\n     * use the flag to avoid the initial \"new messages\" quick blink\n     */\n    var didMount = useRef(false);\n    var lastMessageId = useRef('');\n    var atBottom = useRef(false);\n    useEffect(function () {\n        var _a;\n        if (hasMoreNewer) {\n            setNewMessagesNotification(true);\n            return;\n        }\n        /* handle scrolling behavior for new messages */\n        if (!(messages === null || messages === void 0 ? void 0 : messages.length))\n            return;\n        var lastMessage = messages[messages.length - 1];\n        var prevMessageId = lastMessageId.current;\n        lastMessageId.current = lastMessage.id || ''; // update last message id\n        /* do nothing if new messages are loaded from top(loadMore)  */\n        if (lastMessage.id === prevMessageId)\n            return;\n        /* if list is already at the bottom return, followOutput will do the job */\n        if (atBottom.current)\n            return;\n        /* if the new message belongs to current user scroll to bottom */\n        if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n            /* otherwise just show newMessage notification  */\n            setNewMessagesNotification(true);\n        }\n        didMount.current = true;\n    }, [currentUserId, messages, hasMoreNewer]);\n    return { atBottom: atBottom, newMessagesNotification: newMessagesNotification, setNewMessagesNotification: setNewMessagesNotification };\n}\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAO,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,aAA7C,EAA4DC,YAA5D,EAA0E;EAC7E,IAAIC,EAAE,GAAGL,QAAQ,CAAC,KAAD,CAAjB;EAAA,IAA0BM,uBAAuB,GAAGD,EAAE,CAAC,CAAD,CAAtD;EAAA,IAA2DE,0BAA0B,GAAGF,EAAE,CAAC,CAAD,CAA1F;EACA;AACJ;AACA;;;EACI,IAAIG,QAAQ,GAAGT,MAAM,CAAC,KAAD,CAArB;EACA,IAAIU,aAAa,GAAGV,MAAM,CAAC,EAAD,CAA1B;EACA,IAAIW,QAAQ,GAAGX,MAAM,CAAC,KAAD,CAArB;EACAD,SAAS,CAAC,YAAY;IAClB,IAAIO,EAAJ;;IACA,IAAID,YAAJ,EAAkB;MACdG,0BAA0B,CAAC,IAAD,CAA1B;MACA;IACH;IACD;;;IACA,IAAI,EAAEL,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACS,MAA/D,CAAJ,EACI;IACJ,IAAIC,WAAW,GAAGV,QAAQ,CAACA,QAAQ,CAACS,MAAT,GAAkB,CAAnB,CAA1B;IACA,IAAIE,aAAa,GAAGJ,aAAa,CAACK,OAAlC;IACAL,aAAa,CAACK,OAAd,GAAwBF,WAAW,CAACG,EAAZ,IAAkB,EAA1C,CAXkB,CAW4B;;IAC9C;;IACA,IAAIH,WAAW,CAACG,EAAZ,KAAmBF,aAAvB,EACI;IACJ;;IACA,IAAIH,QAAQ,CAACI,OAAb,EACI;IACJ;;IACA,IAAI,CAAC,CAACT,EAAE,GAAGO,WAAW,CAACI,IAAlB,MAA4B,IAA5B,IAAoCX,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACU,EAAjE,MAAyEZ,aAAzE,IAA0FK,QAAQ,CAACM,OAAvG,EAAgH;MAC5G;MACAP,0BAA0B,CAAC,IAAD,CAA1B;IACH;;IACDC,QAAQ,CAACM,OAAT,GAAmB,IAAnB;EACH,CAxBQ,EAwBN,CAACX,aAAD,EAAgBD,QAAhB,EAA0BE,YAA1B,CAxBM,CAAT;EAyBA,OAAO;IAAEM,QAAQ,EAAEA,QAAZ;IAAsBJ,uBAAuB,EAAEA,uBAA/C;IAAwEC,0BAA0B,EAAEA;EAApG,CAAP;AACH"},"metadata":{},"sourceType":"module"}