{"ast":null,"code":"import { useMemo } from 'react';\nexport var useCreateChatContext = function (value) {\n  var _a;\n\n  var channel = value.channel,\n      channelsQueryState = value.channelsQueryState,\n      client = value.client,\n      closeMobileNav = value.closeMobileNav,\n      customClasses = value.customClasses,\n      getAppSettings = value.getAppSettings,\n      latestMessageDatesByChannels = value.latestMessageDatesByChannels,\n      mutes = value.mutes,\n      navOpen = value.navOpen,\n      openMobileNav = value.openMobileNav,\n      setActiveChannel = value.setActiveChannel,\n      theme = value.theme,\n      useImageFlagEmojisOnWindows = value.useImageFlagEmojisOnWindows;\n  var channelCid = channel === null || channel === void 0 ? void 0 : channel.cid;\n  var channelsQueryError = channelsQueryState.error;\n  var channelsQueryInProgress = channelsQueryState.queryInProgress;\n  var clientValues = \"\" + client.clientID + Object.keys(client.activeChannels).length + Object.keys(client.listeners).length + client.mutedChannels.length + \"\\n  \" + ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n  var mutedUsersLength = mutes.length;\n  var chatContext = useMemo(function () {\n    return {\n      channel: channel,\n      channelsQueryState: channelsQueryState,\n      client: client,\n      closeMobileNav: closeMobileNav,\n      customClasses: customClasses,\n      getAppSettings: getAppSettings,\n      latestMessageDatesByChannels: latestMessageDatesByChannels,\n      mutes: mutes,\n      navOpen: navOpen,\n      openMobileNav: openMobileNav,\n      setActiveChannel: setActiveChannel,\n      theme: theme,\n      useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows\n    };\n  }, [channelCid, channelsQueryError, channelsQueryInProgress, clientValues, getAppSettings, mutedUsersLength, navOpen]);\n  return chatContext;\n};","map":{"version":3,"names":["useMemo","useCreateChatContext","value","_a","channel","channelsQueryState","client","closeMobileNav","customClasses","getAppSettings","latestMessageDatesByChannels","mutes","navOpen","openMobileNav","setActiveChannel","theme","useImageFlagEmojisOnWindows","channelCid","cid","channelsQueryError","error","channelsQueryInProgress","queryInProgress","clientValues","clientID","Object","keys","activeChannels","length","listeners","mutedChannels","user","id","mutedUsersLength","chatContext"],"sources":["/Users/cherrie/Desktop/messenger_ver_2/client/node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatContext.js"],"sourcesContent":["import { useMemo } from 'react';\nexport var useCreateChatContext = function (value) {\n    var _a;\n    var channel = value.channel, channelsQueryState = value.channelsQueryState, client = value.client, closeMobileNav = value.closeMobileNav, customClasses = value.customClasses, getAppSettings = value.getAppSettings, latestMessageDatesByChannels = value.latestMessageDatesByChannels, mutes = value.mutes, navOpen = value.navOpen, openMobileNav = value.openMobileNav, setActiveChannel = value.setActiveChannel, theme = value.theme, useImageFlagEmojisOnWindows = value.useImageFlagEmojisOnWindows;\n    var channelCid = channel === null || channel === void 0 ? void 0 : channel.cid;\n    var channelsQueryError = channelsQueryState.error;\n    var channelsQueryInProgress = channelsQueryState.queryInProgress;\n    var clientValues = \"\" + client.clientID + Object.keys(client.activeChannels).length + Object.keys(client.listeners).length + client.mutedChannels.length + \"\\n  \" + ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n    var mutedUsersLength = mutes.length;\n    var chatContext = useMemo(function () { return ({\n        channel: channel,\n        channelsQueryState: channelsQueryState,\n        client: client,\n        closeMobileNav: closeMobileNav,\n        customClasses: customClasses,\n        getAppSettings: getAppSettings,\n        latestMessageDatesByChannels: latestMessageDatesByChannels,\n        mutes: mutes,\n        navOpen: navOpen,\n        openMobileNav: openMobileNav,\n        setActiveChannel: setActiveChannel,\n        theme: theme,\n        useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,\n    }); }, [\n        channelCid,\n        channelsQueryError,\n        channelsQueryInProgress,\n        clientValues,\n        getAppSettings,\n        mutedUsersLength,\n        navOpen,\n    ]);\n    return chatContext;\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,KAAV,EAAiB;EAC/C,IAAIC,EAAJ;;EACA,IAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;EAAA,IAA6BC,kBAAkB,GAAGH,KAAK,CAACG,kBAAxD;EAAA,IAA4EC,MAAM,GAAGJ,KAAK,CAACI,MAA3F;EAAA,IAAmGC,cAAc,GAAGL,KAAK,CAACK,cAA1H;EAAA,IAA0IC,aAAa,GAAGN,KAAK,CAACM,aAAhK;EAAA,IAA+KC,cAAc,GAAGP,KAAK,CAACO,cAAtM;EAAA,IAAsNC,4BAA4B,GAAGR,KAAK,CAACQ,4BAA3P;EAAA,IAAyRC,KAAK,GAAGT,KAAK,CAACS,KAAvS;EAAA,IAA8SC,OAAO,GAAGV,KAAK,CAACU,OAA9T;EAAA,IAAuUC,aAAa,GAAGX,KAAK,CAACW,aAA7V;EAAA,IAA4WC,gBAAgB,GAAGZ,KAAK,CAACY,gBAArY;EAAA,IAAuZC,KAAK,GAAGb,KAAK,CAACa,KAAra;EAAA,IAA4aC,2BAA2B,GAAGd,KAAK,CAACc,2BAAhd;EACA,IAAIC,UAAU,GAAGb,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACc,GAA3E;EACA,IAAIC,kBAAkB,GAAGd,kBAAkB,CAACe,KAA5C;EACA,IAAIC,uBAAuB,GAAGhB,kBAAkB,CAACiB,eAAjD;EACA,IAAIC,YAAY,GAAG,KAAKjB,MAAM,CAACkB,QAAZ,GAAuBC,MAAM,CAACC,IAAP,CAAYpB,MAAM,CAACqB,cAAnB,EAAmCC,MAA1D,GAAmEH,MAAM,CAACC,IAAP,CAAYpB,MAAM,CAACuB,SAAnB,EAA8BD,MAAjG,GAA0GtB,MAAM,CAACwB,aAAP,CAAqBF,MAA/H,GAAwI,MAAxI,IAAkJ,CAACzB,EAAE,GAAGG,MAAM,CAACyB,IAAb,MAAuB,IAAvB,IAA+B5B,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC6B,EAA7M,CAAnB;EACA,IAAIC,gBAAgB,GAAGtB,KAAK,CAACiB,MAA7B;EACA,IAAIM,WAAW,GAAGlC,OAAO,CAAC,YAAY;IAAE,OAAQ;MAC5CI,OAAO,EAAEA,OADmC;MAE5CC,kBAAkB,EAAEA,kBAFwB;MAG5CC,MAAM,EAAEA,MAHoC;MAI5CC,cAAc,EAAEA,cAJ4B;MAK5CC,aAAa,EAAEA,aAL6B;MAM5CC,cAAc,EAAEA,cAN4B;MAO5CC,4BAA4B,EAAEA,4BAPc;MAQ5CC,KAAK,EAAEA,KARqC;MAS5CC,OAAO,EAAEA,OATmC;MAU5CC,aAAa,EAAEA,aAV6B;MAW5CC,gBAAgB,EAAEA,gBAX0B;MAY5CC,KAAK,EAAEA,KAZqC;MAa5CC,2BAA2B,EAAEA;IAbe,CAAR;EAcnC,CAdoB,EAclB,CACHC,UADG,EAEHE,kBAFG,EAGHE,uBAHG,EAIHE,YAJG,EAKHd,cALG,EAMHwB,gBANG,EAOHrB,OAPG,CAdkB,CAAzB;EAuBA,OAAOsB,WAAP;AACH,CAhCM"},"metadata":{},"sourceType":"module"}