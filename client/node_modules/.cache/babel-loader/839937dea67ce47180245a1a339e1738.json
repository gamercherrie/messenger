{"ast":null,"code":"import { isDate, isDayOrMoment, isNumberOrString } from '../context';\nexport var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';\nexport var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';\nexport function getDateString(_a) {\n  var calendar = _a.calendar,\n      format = _a.format,\n      formatDate = _a.formatDate,\n      messageCreatedAt = _a.messageCreatedAt,\n      tDateTimeParser = _a.tDateTimeParser;\n\n  if (!messageCreatedAt || typeof messageCreatedAt === 'string' && !Date.parse(messageCreatedAt)) {\n    console.warn(notValidDateWarning);\n    return null;\n  }\n\n  if (typeof formatDate === 'function') {\n    return formatDate(new Date(messageCreatedAt));\n  }\n\n  if (!tDateTimeParser) {\n    console.warn(noParsingFunctionWarning);\n    return null;\n  }\n\n  var parsedTime = tDateTimeParser(messageCreatedAt);\n\n  if (isDayOrMoment(parsedTime)) {\n    /**\n     * parsedTime.calendar is guaranteed on the type but is only\n     * available when a user calls dayjs.extend(calendar)\n     */\n    return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);\n  }\n\n  if (isDate(parsedTime)) {\n    return parsedTime.toDateString();\n  }\n\n  if (isNumberOrString(parsedTime)) {\n    return parsedTime;\n  }\n\n  return null;\n}","map":{"version":3,"names":["isDate","isDayOrMoment","isNumberOrString","notValidDateWarning","noParsingFunctionWarning","getDateString","_a","calendar","format","formatDate","messageCreatedAt","tDateTimeParser","Date","parse","console","warn","parsedTime","toDateString"],"sources":["/Users/cherrie/Desktop/messenger_ver_2/client/node_modules/stream-chat-react/dist/i18n/utils.js"],"sourcesContent":["import { isDate, isDayOrMoment, isNumberOrString, } from '../context';\nexport var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';\nexport var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';\nexport function getDateString(_a) {\n    var calendar = _a.calendar, format = _a.format, formatDate = _a.formatDate, messageCreatedAt = _a.messageCreatedAt, tDateTimeParser = _a.tDateTimeParser;\n    if (!messageCreatedAt ||\n        (typeof messageCreatedAt === 'string' && !Date.parse(messageCreatedAt))) {\n        console.warn(notValidDateWarning);\n        return null;\n    }\n    if (typeof formatDate === 'function') {\n        return formatDate(new Date(messageCreatedAt));\n    }\n    if (!tDateTimeParser) {\n        console.warn(noParsingFunctionWarning);\n        return null;\n    }\n    var parsedTime = tDateTimeParser(messageCreatedAt);\n    if (isDayOrMoment(parsedTime)) {\n        /**\n         * parsedTime.calendar is guaranteed on the type but is only\n         * available when a user calls dayjs.extend(calendar)\n         */\n        return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);\n    }\n    if (isDate(parsedTime)) {\n        return parsedTime.toDateString();\n    }\n    if (isNumberOrString(parsedTime)) {\n        return parsedTime;\n    }\n    return null;\n}\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,aAAjB,EAAgCC,gBAAhC,QAAyD,YAAzD;AACA,OAAO,IAAIC,mBAAmB,GAAG,wFAA1B;AACP,OAAO,IAAIC,wBAAwB,GAAG,iFAA/B;AACP,OAAO,SAASC,aAAT,CAAuBC,EAAvB,EAA2B;EAC9B,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;EAAA,IAA4BC,MAAM,GAAGF,EAAE,CAACE,MAAxC;EAAA,IAAgDC,UAAU,GAAGH,EAAE,CAACG,UAAhE;EAAA,IAA4EC,gBAAgB,GAAGJ,EAAE,CAACI,gBAAlG;EAAA,IAAoHC,eAAe,GAAGL,EAAE,CAACK,eAAzI;;EACA,IAAI,CAACD,gBAAD,IACC,OAAOA,gBAAP,KAA4B,QAA5B,IAAwC,CAACE,IAAI,CAACC,KAAL,CAAWH,gBAAX,CAD9C,EAC6E;IACzEI,OAAO,CAACC,IAAR,CAAaZ,mBAAb;IACA,OAAO,IAAP;EACH;;EACD,IAAI,OAAOM,UAAP,KAAsB,UAA1B,EAAsC;IAClC,OAAOA,UAAU,CAAC,IAAIG,IAAJ,CAASF,gBAAT,CAAD,CAAjB;EACH;;EACD,IAAI,CAACC,eAAL,EAAsB;IAClBG,OAAO,CAACC,IAAR,CAAaX,wBAAb;IACA,OAAO,IAAP;EACH;;EACD,IAAIY,UAAU,GAAGL,eAAe,CAACD,gBAAD,CAAhC;;EACA,IAAIT,aAAa,CAACe,UAAD,CAAjB,EAA+B;IAC3B;AACR;AACA;AACA;IACQ,OAAOT,QAAQ,IAAIS,UAAU,CAACT,QAAvB,GAAkCS,UAAU,CAACT,QAAX,EAAlC,GAA0DS,UAAU,CAACR,MAAX,CAAkBA,MAAlB,CAAjE;EACH;;EACD,IAAIR,MAAM,CAACgB,UAAD,CAAV,EAAwB;IACpB,OAAOA,UAAU,CAACC,YAAX,EAAP;EACH;;EACD,IAAIf,gBAAgB,CAACc,UAAD,CAApB,EAAkC;IAC9B,OAAOA,UAAP;EACH;;EACD,OAAO,IAAP;AACH"},"metadata":{},"sourceType":"module"}